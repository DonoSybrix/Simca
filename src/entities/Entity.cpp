////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "Entity.hpp"

////////////////////////////////////////////////////////////
/// Default constructor
////////////////////////////////////////////////////////////
Entity::Entity() : myWidth(40), myHeight(65), myRadius( 30.0f ), isDraggable(true)
{

}


////////////////////////////////////////////////////////////
/// Default destructor
////////////////////////////////////////////////////////////
Entity::~Entity()
{

}

////////////////////////////////////////////////////////////
/// Initialisation method
////////////////////////////////////////////////////////////
void Entity::Init()
{

}


////////////////////////////////////////////////////////////
/// Set width
////////////////////////////////////////////////////////////
void Entity::SetWidth( const unsigned int width )
{
    myWidth = width;
}


////////////////////////////////////////////////////////////
/// Set height
////////////////////////////////////////////////////////////
void Entity::SetHeight( const unsigned int height )
{
    myHeight = height;
}

////////////////////////////////////////////////////////////
/// Set radius TODO : Passer en radiants
////////////////////////////////////////////////////////////
void Entity::SetRadius( float radius )
{
    if( radius > 360 || radius < 0 )
    	// Angle modulo 360
        radius = fmod(radius,360);

    myRadius = radius;
}

////////////////////////////////////////////////////////////
/// Get width
////////////////////////////////////////////////////////////
unsigned int Entity::GetWidth() const
{
    return myWidth;
}


////////////////////////////////////////////////////////////
/// Get height
////////////////////////////////////////////////////////////
unsigned int Entity::GetHeight() const
{
    return myHeight;
}


////////////////////////////////////////////////////////////
/// Get radius
////////////////////////////////////////////////////////////
float Entity::GetRadius() const
{
    return myRadius;
}


////////////////////////////////////////////////////////////
/// Is draggable
////////////////////////////////////////////////////////////
bool Entity::IsDraggable()
{
    return isDraggable;
}


////////////////////////////////////////////////////////////
/// Update element
////////////////////////////////////////////////////////////
void Entity::Update()
{

}

